import urllib.request
import re
import os

def getHtmlContent(url):
    #需要添加请求头模拟浏览器访问,应对反爬机制
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    req = urllib.request.Request(url, headers=headers)
    page = urllib.request.urlopen(req)
    return page.read().decode('utf-8')

def getPostImages(html):
    # 匹配贴吧帖子中的图片（通常是 BDE_Image 类）
    img_reg = re.compile(r'<img.*?class="BDE_Image".*?src="(.*?)".*?>')#正则表达式随要爬取的网页而变化
    imgs = re.findall(img_reg, html)
    
    # 如果没有匹配到，尝试匹配另一种格式（如懒加载图片）
    if not imgs:
        img_reg = re.compile(r'<img.*?data-url="(.*?)".*?>')
        imgs = re.findall(img_reg, html)
    
    # 补全协议（如果图片链接是 // 开头）
    imgs = ['https:' + img if img.startswith('//') else img for img in imgs]
    return imgs

def downloadImage(img_url, file_path):
    try:
        if not os.path.exists(os.path.dirname(file_path)):
            os.makedirs(os.path.dirname(file_path))
            
        urllib.request.urlretrieve(img_url, file_path)
        print(f"成功下载: {file_path}")
    except Exception as e:
        print(f"下载失败 {img_url}: {str(e)}")

def batchDownloadImages(img_urls, path='./tieba_images'):
    for idx, img_url in enumerate(img_urls, 1):#索引从1开始
        file_name = f"{path}/image_{idx}.{img_url.split('.')[-1].split('?')[0]}"  # 处理带参数的图片URL，取文件扩展名
        downloadImage(img_url, file_name)

def download(url):
    html = getHtmlContent(url)
    print("获取到的HTML内容（前500字符）:")
    print(html[:500])
    
    imgs = getPostImages(html)
    print(f"找到 {len(imgs)} 张帖子图片")
    
    if imgs:
        batchDownloadImages(imgs)
    else:
        print("未找到帖子图片，可能是动态加载的内容或选择器需要调整")

def main():
    url = 'https://tieba.baidu.com/p/9678900907'
    download(url)

if __name__ == '__main__':
    main()
